{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar Stack = createNativeStackNavigator();\nimport * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport LoadingScreen from \"./screens/LoadingScreen\";\nimport MainScreen from \"./screens/MainScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hideSplashScreen = _React$useState2[0],\n    setHideSplashScreen = _React$useState2[1];\n  var _useFonts = useFonts({\n      \"Poppins-Light\": require(\"./assets/fonts/Poppins-Light.ttf\"),\n      \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n      \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n      \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n      \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n      \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 2),\n    fontsLoaded = _useFonts2[0],\n    error = _useFonts2[1];\n  if (!fontsLoaded && !error) {\n    return null;\n  }\n  return _jsx(_Fragment, {\n    children: _jsx(NavigationContainer, {\n      children: hideSplashScreen ? _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerShown: false\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"LoadingScreen\",\n          component: LoadingScreen,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"MainScreen\",\n          component: MainScreen,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"LoginScreen\",\n          component: LoginScreen,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"SplashScreen\",\n          component: SplashScreen,\n          options: {\n            headerShown: false\n          }\n        })]\n      }) : null\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["Stack","createNativeStackNavigator","React","NavigationContainer","useFonts","LoadingScreen","MainScreen","LoginScreen","SplashScreen","View","Text","Pressable","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","_React$useState","useState","_React$useState2","_slicedToArray","hideSplashScreen","setHideSplashScreen","_useFonts","require","_useFonts2","fontsLoaded","error","children","Navigator","screenOptions","headerShown","Screen","name","component","options"],"sources":["C:/Users/gabri/Documents/FACULDADE/cleber.io/cleber.io/App.js"],"sourcesContent":["const Stack = createNativeStackNavigator();\nimport * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport LoadingScreen from \"./screens/LoadingScreen\";\nimport MainScreen from \"./screens/MainScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\n\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { View, Text, Pressable, TouchableOpacity } from \"react-native\";\n\nconst App = () => {\n  const [hideSplashScreen, setHideSplashScreen] = React.useState(false);\n  const [fontsLoaded, error] = useFonts({\n    \"Poppins-Light\": require(\"./assets/fonts/Poppins-Light.ttf\"),\n    \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n    \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n    \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n    \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n    \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\"),\n  });\n\n  if (!fontsLoaded && !error) {\n    return null;\n  }\n\n  return (\n    <>\n      <NavigationContainer>\n        {hideSplashScreen ? (\n          <Stack.Navigator screenOptions={{ headerShown: false }}>\n            <Stack.Screen\n              name=\"LoadingScreen\"\n              component={LoadingScreen}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen\n              name=\"MainScreen\"\n              component={MainScreen}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen\n              name=\"LoginScreen\"\n              component={LoginScreen}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen\n              name=\"SplashScreen\"\n              component={SplashScreen}\n              options={{ headerShown: false }}\n            />\n          </Stack.Navigator>\n        ) : null}\n      </NavigationContainer>\n    </>\n  );\n};\nexport default App;\n"],"mappings":";AAAA,IAAMA,KAAK,GAAGC,0BAA0B,CAAC,CAAC;AAC1C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAOC,aAAa;AACpB,OAAOC,UAAU;AACjB,OAAOC,WAAW;AAClB,OAAOC,YAAY;AAEnB,SAASP,0BAA0B,QAAQ,gCAAgC;AAAC,OAAAQ,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG5E,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,eAAA,GAAgDlB,KAAK,CAACmB,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA9DI,gBAAgB,GAAAF,gBAAA;IAAEG,mBAAmB,GAAAH,gBAAA;EAC5C,IAAAI,SAAA,GAA6BtB,QAAQ,CAAC;MACpC,eAAe,EAAEuB,OAAO,mCAAmC,CAAC;MAC5D,iBAAiB,EAAEA,OAAO,qCAAqC,CAAC;MAChE,gBAAgB,EAAEA,OAAO,oCAAoC,CAAC;MAC9D,kBAAkB,EAAEA,OAAO,sCAAsC,CAAC;MAClE,mBAAmB,EAAEA,OAAO,uCAAuC,CAAC;MACpE,eAAe,EAAEA,OAAO,mCAAmC;IAC7D,CAAC,CAAC;IAAAC,UAAA,GAAAL,cAAA,CAAAG,SAAA;IAPKG,WAAW,GAAAD,UAAA;IAAEE,KAAK,GAAAF,UAAA;EASzB,IAAI,CAACC,WAAW,IAAI,CAACC,KAAK,EAAE;IAC1B,OAAO,IAAI;EACb;EAEA,OACEhB,IAAA,CAAAI,SAAA;IAAAa,QAAA,EACEjB,IAAA,CAACX,mBAAmB;MAAA4B,QAAA,EACjBP,gBAAgB,GACfR,KAAA,CAAChB,KAAK,CAACgC,SAAS;QAACC,aAAa,EAAE;UAAEC,WAAW,EAAE;QAAM,CAAE;QAAAH,QAAA,GACrDjB,IAAA,CAACd,KAAK,CAACmC,MAAM;UACXC,IAAI,EAAC,eAAe;UACpBC,SAAS,EAAEhC,aAAc;UACzBiC,OAAO,EAAE;YAAEJ,WAAW,EAAE;UAAM;QAAE,CACjC,CAAC,EACFpB,IAAA,CAACd,KAAK,CAACmC,MAAM;UACXC,IAAI,EAAC,YAAY;UACjBC,SAAS,EAAE/B,UAAW;UACtBgC,OAAO,EAAE;YAAEJ,WAAW,EAAE;UAAM;QAAE,CACjC,CAAC,EACFpB,IAAA,CAACd,KAAK,CAACmC,MAAM;UACXC,IAAI,EAAC,aAAa;UAClBC,SAAS,EAAE9B,WAAY;UACvB+B,OAAO,EAAE;YAAEJ,WAAW,EAAE;UAAM;QAAE,CACjC,CAAC,EACFpB,IAAA,CAACd,KAAK,CAACmC,MAAM;UACXC,IAAI,EAAC,cAAc;UACnBC,SAAS,EAAE7B,YAAa;UACxB8B,OAAO,EAAE;YAAEJ,WAAW,EAAE;UAAM;QAAE,CACjC,CAAC;MAAA,CACa,CAAC,GAChB;IAAI,CACW;EAAC,CACtB,CAAC;AAEP,CAAC;AACD,eAAef,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}