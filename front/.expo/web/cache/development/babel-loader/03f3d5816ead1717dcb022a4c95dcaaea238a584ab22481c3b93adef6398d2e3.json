{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar Stack = createNativeStackNavigator();\nimport * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport LoadingScreen from \"./screens/LoadingScreen\";\nimport MainScreen from \"./screens/MainScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useFonts = useFonts({\n      \"Poppins-Light\": require(\"./assets/fonts/Poppins-Light.ttf\"),\n      \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n      \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n      \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n      \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n      \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 2),\n    fontsLoaded = _useFonts2[0],\n    error = _useFonts2[1];\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    showLoginScreen = _React$useState2[0],\n    setShowLoginScreen = _React$useState2[1];\n  React.useEffect(function () {\n    if (fontsLoaded) {\n      setTimeout(function () {\n        setShowLoginScreen(true);\n      }, 3000);\n    }\n  }, [fontsLoaded]);\n  if (!fontsLoaded && !error) {\n    return null;\n  }\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"LoginScreen\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"SplashScreen\",\n        component: SplashScreen\n      })]\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["Stack","createNativeStackNavigator","React","NavigationContainer","useFonts","LoadingScreen","MainScreen","LoginScreen","SplashScreen","View","Text","Pressable","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","App","_useFonts","require","_useFonts2","_slicedToArray","fontsLoaded","error","_React$useState","useState","_React$useState2","showLoginScreen","setShowLoginScreen","useEffect","setTimeout","children","Navigator","screenOptions","headerShown","Screen","name","component"],"sources":["C:/Users/joaop/OneDrive/Área de Trabalho/Unimar/Cleber.io/front/App.js"],"sourcesContent":["const Stack = createNativeStackNavigator();\nimport * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport LoadingScreen from \"./screens/LoadingScreen\";\nimport MainScreen from \"./screens/MainScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\n\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { View, Text, Pressable, TouchableOpacity } from \"react-native\";\n\nconst App = () => {\n  const [fontsLoaded, error] = useFonts({\n    \"Poppins-Light\": require(\"./assets/fonts/Poppins-Light.ttf\"),\n    \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n    \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n    \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n    \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n    \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\"),\n  });\n\n  const [showLoginScreen, setShowLoginScreen] = React.useState(false);\n\n  React.useEffect(() => {\n    if (fontsLoaded) {\n      setTimeout(() => {\n        setShowLoginScreen(true);\n      }, 3000);\n    }\n  }, [fontsLoaded]);\n\n  if (!fontsLoaded && !error) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n          <Stack.Screen name=\"SplashScreen\" component={SplashScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\n\n\nexport default App;"],"mappings":";AAAA,IAAMA,KAAK,GAAGC,0BAA0B,CAAC,CAAC;AAC1C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,QAAQ,QAAQ,WAAW;AACpC,OAAOC,aAAa;AACpB,OAAOC,UAAU;AACjB,OAAOC,WAAW;AAClB,OAAOC,YAAY;AAEnB,SAASP,0BAA0B,QAAQ,gCAAgC;AAAC,OAAAQ,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG5E,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,SAAA,GAA6Bd,QAAQ,CAAC;MACpC,eAAe,EAAEe,OAAO,mCAAmC,CAAC;MAC5D,iBAAiB,EAAEA,OAAO,qCAAqC,CAAC;MAChE,gBAAgB,EAAEA,OAAO,oCAAoC,CAAC;MAC9D,kBAAkB,EAAEA,OAAO,sCAAsC,CAAC;MAClE,mBAAmB,EAAEA,OAAO,uCAAuC,CAAC;MACpE,eAAe,EAAEA,OAAO,mCAAmC;IAC7D,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAPKI,WAAW,GAAAF,UAAA;IAAEG,KAAK,GAAAH,UAAA;EASzB,IAAAI,eAAA,GAA8CtB,KAAK,CAACuB,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAL,cAAA,CAAAG,eAAA;IAA5DG,eAAe,GAAAD,gBAAA;IAAEE,kBAAkB,GAAAF,gBAAA;EAE1CxB,KAAK,CAAC2B,SAAS,CAAC,YAAM;IACpB,IAAIP,WAAW,EAAE;MACfQ,UAAU,CAAC,YAAM;QACfF,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,EAAE,CAACN,WAAW,CAAC,CAAC;EAEjB,IAAI,CAACA,WAAW,IAAI,CAACC,KAAK,EAAE;IAC1B,OAAO,IAAI;EACb;EAEA,OACET,IAAA,CAACX,mBAAmB;IAAA4B,QAAA,EAClBf,KAAA,CAAChB,KAAK,CAACgC,SAAS;MAACC,aAAa,EAAE;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAAH,QAAA,GACnDjB,IAAA,CAACd,KAAK,CAACmC,MAAM;QAACC,IAAI,EAAC,aAAa;QAACC,SAAS,EAAE9B;MAAY,CAAE,CAAC,EAC3DO,IAAA,CAACd,KAAK,CAACmC,MAAM;QAACC,IAAI,EAAC,cAAc;QAACC,SAAS,EAAE7B;MAAa,CAAE,CAAC;IAAA,CAChD;EAAC,CACC,CAAC;AAE1B,CAAC;AAID,eAAeS,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}