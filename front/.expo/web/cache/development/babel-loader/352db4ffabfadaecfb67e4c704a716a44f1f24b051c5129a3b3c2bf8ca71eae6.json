{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar Stack = createNativeStackNavigator();\nimport * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport MainScreen from \"./screens/MainScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useFonts = useFonts({\n      \"Poppins-Light\": require(\"./assets/fonts/Poppins-Light.ttf\"),\n      \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n      \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n      \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n      \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n      \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 2),\n    fontsLoaded = _useFonts2[0],\n    error = _useFonts2[1];\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    showLoginScreen = _React$useState2[0],\n    setShowLoginScreen = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    loggedIn = _React$useState4[0],\n    setLoggedIn = _React$useState4[1];\n  React.useEffect(function () {\n    if (fontsLoaded && !showLoginScreen) {\n      setTimeout(function () {\n        setShowLoginScreen(true);\n      }, 3000);\n    }\n  }, [fontsLoaded, showLoginScreen]);\n  var handleLoginSuccess = function handleLoginSuccess() {\n    setLoggedIn(true);\n  };\n  var handleLogout = function handleLogout() {\n    setShowLoginScreen(false);\n    setLoggedIn(false);\n  };\n  if (!fontsLoaded && !error) {\n    return null;\n  }\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: showLoginScreen ? loggedIn ? _jsx(Stack.Screen, {\n        name: \"MainScreen\",\n        children: function children(props) {\n          return _jsx(MainScreen, _objectSpread(_objectSpread({}, props), {}, {\n            onLogout: handleLogout\n          }));\n        }\n      }) : _jsx(Stack.Screen, {\n        name: \"LoginScreen\",\n        children: function children(props) {\n          return _jsx(LoginScreen, _objectSpread(_objectSpread({}, props), {}, {\n            onLoginSuccess: handleLoginSuccess\n          }));\n        }\n      }) : _jsx(Stack.Screen, {\n        name: \"SplashScreen\",\n        component: SplashScreen\n      })\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["Stack","createNativeStackNavigator","React","NavigationContainer","useFonts","MainScreen","LoginScreen","SplashScreen","View","Text","Pressable","TouchableOpacity","jsx","_jsx","App","_useFonts","require","_useFonts2","_slicedToArray","fontsLoaded","error","_React$useState","useState","_React$useState2","showLoginScreen","setShowLoginScreen","_React$useState3","_React$useState4","loggedIn","setLoggedIn","useEffect","setTimeout","handleLoginSuccess","handleLogout","children","Navigator","screenOptions","headerShown","Screen","name","props","_objectSpread","onLogout","onLoginSuccess","component"],"sources":["C:/Users/joaop/OneDrive/Área de Trabalho/Unimar/Cleber.io/front/App.js"],"sourcesContent":["const Stack = createNativeStackNavigator();\nimport * as React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { useFonts } from \"expo-font\";\nimport MainScreen from \"./screens/MainScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SplashScreen from \"./screens/SplashScreen\";\n\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { View, Text, Pressable, TouchableOpacity } from \"react-native\";\n\nconst App = () => {\n  const [fontsLoaded, error] = useFonts({\n    \"Poppins-Light\": require(\"./assets/fonts/Poppins-Light.ttf\"),\n    \"Poppins-Regular\": require(\"./assets/fonts/Poppins-Regular.ttf\"),\n    \"Poppins-Medium\": require(\"./assets/fonts/Poppins-Medium.ttf\"),\n    \"Poppins-SemiBold\": require(\"./assets/fonts/Poppins-SemiBold.ttf\"),\n    \"Poppins-ExtraBold\": require(\"./assets/fonts/Poppins-ExtraBold.ttf\"),\n    \"Poppins-Black\": require(\"./assets/fonts/Poppins-Black.ttf\"),\n  });\n\n  const [showLoginScreen, setShowLoginScreen] = React.useState(false);\n  const [loggedIn, setLoggedIn] = React.useState(false);\n\n  React.useEffect(() => {\n    if (fontsLoaded && !showLoginScreen) {\n      setTimeout(() => {\n        setShowLoginScreen(true);\n      }, 3000);\n    }\n  }, [fontsLoaded, showLoginScreen]);\n\n  const handleLoginSuccess = () => {\n    setLoggedIn(true);\n  };\n\n  const handleLogout = () => {\n    setShowLoginScreen(false);\n    setLoggedIn(false);\n  };\n\n  if (!fontsLoaded && !error) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        {showLoginScreen ? (\n          loggedIn ? (\n            <Stack.Screen name=\"MainScreen\">\n              {(props) => (\n                <MainScreen {...props} onLogout={handleLogout} />\n              )}\n            </Stack.Screen>\n          ) : (\n            <Stack.Screen name=\"LoginScreen\">\n              {(props) => <LoginScreen {...props} onLoginSuccess={handleLoginSuccess} />}\n            </Stack.Screen>\n          )\n        ) : (\n          <Stack.Screen name=\"SplashScreen\" component={SplashScreen} />\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}